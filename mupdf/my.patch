865c865
< 			sprintf(buf, "...%s%s - %d/%d - MuPDF", title + n - 50, extra, currentpage.page + 1, fz_count_pages(ctx, doc));
---
> 			sprintf(buf, "...%s%s - %d/%d", title + n - 50, extra, currentpage.page + 1, fz_count_pages(ctx, doc));
867c867
< 			sprintf(buf, "...%s%s - %d/%d - %d/%d - MuPDF", title + n - 50, extra,
---
> 			sprintf(buf, "...%s%s - %d/%d - %d/%d", title + n - 50, extra,
874c874
< 			sprintf(buf, "%s%s - %d/%d - MuPDF", title, extra, currentpage.page + 1, fz_count_pages(ctx, doc));
---
> 			sprintf(buf, "%s%s - %d/%d", title, extra, currentpage.page + 1, fz_count_pages(ctx, doc));
877c877
< 			sprintf(buf, "%s%s - %d/%d - %d/%d - MuPDF", title, extra,
---
> 			sprintf(buf, "%s%s - %d/%d - %d/%d", title, extra,
2069,2098d2068
< static void move_backward(void)
< {
< 	int slop_y = page_tex.h / 20;
< 	if (scroll_y <= slop_y) {
< 		fz_location prev = fz_previous_page(ctx, doc, currentpage);
< 		if (!eqloc(currentpage, prev)) {
< 			scroll_y    = (page_tex.h <= canvas_h) ? 0 : page_tex.h - canvas_h;
< 			currentpage = prev;
< 		}
< 	} else {
< 		scroll_y -= canvas_h * 9 / 10;
< 	}
< }
< 
< static void move_forward(void)
< {
< 	int slop_y = page_tex.h / 20;
< 	if (scroll_y + canvas_h >= page_tex.h - slop_y) {
< 		fz_location next = fz_next_page(ctx, doc, currentpage);
< 		if (!eqloc(currentpage, next)) {
< 			scroll_y    = 0;
< 			currentpage = next;
< 		}
< 	} else {
< 		scroll_y += canvas_h * 9 / 10;
< 	}
< }
< 
< 
< 
2361c2331
< 		case 'M': toggle_undo(); break;
---
> 		case 'u': toggle_undo(); break;
2378c2348
< 		/* case 'f': toggle_fullscreen(); break; */
---
> 		case 'f': toggle_fullscreen(); break;
2394c2364
< 		case 'f': number = fz_maxi(number, 1); while (number--) smart_move_forward(); break;
---
> 		case ' ': number = fz_maxi(number, 1); while (number--) smart_move_forward(); break;
2398c2368
< 		case 'K': case KEY_PAGE_UP:
---
> 		case ',': case KEY_PAGE_UP:
2403c2373
< 		case 'J': case KEY_PAGE_DOWN:
---
> 		case '.': case KEY_PAGE_DOWN:
2497,2506d2466
< 		case 'u':
< 			number = fz_maxi(number, 1);
< 			while (number--)
< 				move_backward();
< 			break;
< 		case 'd':
< 			number = fz_maxi(number, 1);
< 			while (number--)
< 				move_forward();
< 			break;
3017c2977
<  		glClearColor(0.0f, 0.17f, 0.21f, 1);
---
> 		glClearColor(0.3f, 0.3f, 0.3f, 1);
